// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusEnum {
  WAITING
  PROGRESS
  DONE
  DECLINED
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  company       Company[]
  Event         Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Company {
  id          String  @id @default(cuid())
  registerId  String
  name        String
  employees   Int
  capital     Int
  link        String
  memo        String
  assignment  Assignment []
  Event       Event []

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [registerId], references: [id], onDelete: Cascade)
}

model Assignment {
  id          String @default(cuid())
  companyId   String
  statusId  StatusEnum
  title       String
  content     String
  deadline    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  status Status @relation(fields: [statusId], references: [id])

  @@id([id, companyId])
}

model Event {
  userId      String
  companyId   String
  seqNo       Int     @default(autoincrement())
  eventDate   String
  statusId    StatusEnum

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  status Status @relation(fields: [statusId], references: [id])

  @@id([userId, companyId, seqNo])
}

model Status {
  id          StatusEnum @id
  value       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Assignment Assignment[]
  Event Event[]
}
